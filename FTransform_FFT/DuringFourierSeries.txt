#include <iostream>
#include<windows.h>
#include<sql.h>
#include "graphics.h"
#include <sstream>
#include <iostream>
#include<stdio.h>
#include<algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <math.h>  
#include <complex>
#include <stack>
#include <cmath>
#include <stdlib.h>     /* malloc, free, rand */
#include <iomanip>      // std::setw

#define _USE_MATH_DEFINES // for C++
#include <cmath>

#include <vector>

using namespace std;

float M_PI = 3.14159265358979323846;


/*
//std::vector<int>array;
//std::vector<float>X;
std::vector<float> freq;
std::vector<float> rad;
std::vector<float> phase;
class DFTransform {
  public:
    // public attribute
	
	 // float freq;
	 // float rad;
	 //float phase;
	// std::vector<std::complex<float>> X;
	 //float N = X.size();

	 float *X = (float*)malloc(100 * sizeof(float));


  public:

	float *dft(float x[], int size) {

			
		   //float *X = (float*)malloc(size * sizeof(float));


		  const float N = size;

		  for (int k = 0; k < N; k++) {

			//  cout << x[k] << "\n";
			  float re = 0;
			  float im = 0;

			  for (int n = 0; n < N; n++) {

				  const float angle = (2 * M_PI*k*n) / N;

				  re += x[n] * cos(angle);
				  im -= x[n] * sin(angle);

			  }
			  re = re / N;
			  im = im / N;
			  freq.push_back(k);
			  float radVal = sqrt((re*re) + (im * im));
			  float phaseVal = atan2(im, re);
			  rad.push_back(radVal);
			  phase.push_back(phaseVal);

			  cout << "real num = " << re << "   imaganery nun=" << im;
			   
		  }
		  return 0;

	  }
	
};

int main() {
	

	float array[] = {100,100,100,-100,-100,-100,100,100,100,-100,-100,-100};

	float const sizeA = sizeof(array) / sizeof(float);
	DFTransform animal[(sizeof(array) / sizeof(float))];
	for (int i = 0; i < sizeA; i++) {
		animal[i].dft(array, sizeA);

		//cout << i << ". " << float(animal[i].X[i]) << "\n\n";
	
		cout << i << ". " << "freq  "<<freq[i];
		cout << "  rad  = " <<rad[i];
		cout << "   phase  = " <<phase[i] << "\n\n";
		
		if (i == sizeA - 1) {
			phase.clear();
			rad.clear();
			freq.clear();
		}
	}
	

	return 0;
}

*/



std::vector<std::complex<float>> animal(std::vector<float>x);

int main() {

		int freq = 0, amp = 0, rad = 0;
		//int N = 100;
		std::vector<float>balance;
	//	balance.reserve((int(balance.size)));

		balance.push_back(100);
		balance.push_back(100);
		balance.push_back(100);
		balance.push_back(-100);
		balance.push_back(-100);
		balance.push_back(-100);
		balance.push_back(100);
		balance.push_back(100);
		balance.push_back(100);
		balance.push_back(-100);
		balance.push_back(-100);
		balance.push_back(-100);


	
		std::vector<std::complex<float>> Average = animal(balance);
		for (int i = 0; i < balance.size(); i++) {

			float re = Average[i].real() ;
			float im = Average[i].imag();
			float radius = sqrt(re*re + im * im);
			float phase = atan2(im,re);
			cout << i << ".   re==" << re << "     im==" << im << "  freq=" << i << "\n\n";


			//cout <<i<< ".   radius==" << radius << "     phase==" << phase<<"\n";
		}


	return 0;



}




std::vector<std::complex<float>> animal(std::vector<float>x) {
	

	const float N = x.size();
	const float K = N;

	std::complex<float>intSum;
	std::vector <std::complex<float>>X;
//	X.reserve(K);

	for (float k = 0; k < N; k++) {
		float re = 0;
		float im = 0;

		for (int n = 0; n < N; n++) {
			float phi = ((2 * M_PI)/N) * k * n;
			re += x[n] * cos(phi);
			im -= x[n] * sin(phi);

		}
		re = re / N;
		im = im / N;
		cout << k << ",," << ".   re==" << re << "     im==" << im << "  freq=" << k << "\n\n";
		float freq = k;
		float amp = sqrt(re * re + im * im);
		float phase = atan2(im, re);
		X.push_back({ re,im });
	}
	

	
	return X;

}
